import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import javax.xml.bind.JAXB

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.postgresql:postgresql:9.4.1207'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'org.jooq:jooq-codegen:3.7.2'
    }
}

plugins {
    id 'application'
    id 'base'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id 'org.flywaydb.flyway' version '3.2.1'
}

group 'us.delta46'
version '1.0-SNAPSHOT'

project.ext {
    configPath = "$rootProject.projectDir/"
    configFile = configPath + 'todo-config.yml'
//    h2Version = '1.4.190'
    jooqVersion = '3.7.2'

    dbUrl = System.getenv("JDBC_DATABASE_URL") ?: "jdbc:postgresql://localhost:5432/todo-db?user=joe&password=password"
//    dbUsername=joe
//    dbPassword=password
}

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8


// See: http://www.notsocomplex.com/2015/04/mrforms/how-to-run-integration-tests-with-gradle/
sourceSets {
    main {
        java.srcDir 'src/generated/java'
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir('src/integrationTest/resources')
    }
}

mainClassName = "us.delta46.sparktodo.TodoApp"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

dependencies {
    compile (
            'com.google.guava:guava:19.0',
            'com.google.code.gson:gson:2.5',
            'com.sparkjava:spark-core:2.3',
            'org.apache.commons:commons-dbcp2:2.1.1',
            'org.projectlombok:lombok:1.16.6',

            'io.dropwizard.modules:dropwizard-flyway:0.9.0-1',


            // Needed for annotation in jOOQ generated code
            'javax.persistence:persistence-api:1.0.2',
            "org.jooq:jooq:$jooqVersion"
    )

    testCompile 'junit:junit:4.11'

    runtime (
//            "com.h2database:h2:$h2Version",
            'org.postgresql:postgresql:9.4.1207'
    )
}

flyway {
    url dbUrl
}


// https://github.com/flyway/flyway/issues/775
// Flyway needs to support Java migrations, so it depends on testClasses.
// That results in a circular dependency for jOOQ because we need migrations
// to run, then jOOQ code-gen and then compileJava
project.afterEvaluate {
    flywayClean.dependsOn -= testClasses
    flywayMigrate.dependsOn = [processResources, processTestResources]
}

task generateJooqCode {
//    description = 'Generate Java API for the database.'
    doLast {
        // https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/jOOQ-codegen-gradle
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
            jdbc() {
                driver('org.postgresql.Driver')
                url(dbUrl)
            }
            generator() {
                database() {
                    inputSchema('todo_backend')
                }

                // Watch out for this caveat when using MarkupBuilder with "reserved names"
                // - https://github.com/jOOQ/jOOQ/issues/4797
                // - http://stackoverflow.com/a/11389034/521799
                // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
                generate([:]) {
                    pojos false
                    immutablePojos false
                    daos false
                    fluentSetters true
                    validationAnnotations true
                    jpaAnnotations true
                    globalObjectReferences true
                }
                target() {
                    packageName('us.delta46.sparktodo.models')
                    directory("src/generated/java")
                }
            }
        }

        // Run the code generator
        GenerationTool.generate(
                JAXB.unmarshal(new StringReader(writer.toString()),
                        org.jooq.util.jaxb.Configuration.class)
        )
    }
}

generateJooqCode.dependsOn flywayMigrate

clean {
      // Maybe keep the code around so the project can still build.
      // Everything stops if you can't build the java code.
      // delete "src/generated"
}

compileJava.dependsOn generateJooqCode


shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}


task stage {
    dependsOn build
    dependsOn shadowJar
}