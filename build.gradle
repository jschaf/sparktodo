import groovy.xml.MarkupBuilder
import org.jooq.util.GenerationTool

import javax.xml.bind.JAXB

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.postgresql:postgresql:9.4.1207'
//        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'org.jooq:jooq-codegen:3.7.2'
    }
}

plugins {
    id 'application'
    id 'base'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
//    id 'org.flywaydb.flyway' version '3.2.1'
}

group 'todoer'
version '1.0-SNAPSHOT'

String getDbUrl() {
    String databaseUrl = System.getenv("JDBC_DATABASE_URL") ?: System.getenv("JDBC_TODO_DEV_URL")
    if (databaseUrl == null) {
        throw new RuntimeException("No matching environmental variables for "
                        + "JDBC_DATABASE_URL or JDBC_TODO_DEV_URL");
    }
    return databaseUrl;
}

project.ext {
    configPath = "$rootProject.projectDir/"
    configFile = configPath + 'todo-config.yml'
    jooqVersion = '3.7.2'
    dbUrl = getDbUrl()
}

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8


// See: http://www.notsocomplex.com/2015/04/mrforms/how-to-run-integration-tests-with-gradle/
sourceSets {
    main {
        java.srcDir 'src/generated/java'
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir('src/integrationTest/resources')
    }
}

//noinspection GroovyUnusedAssignment
mainClassName = "todoer.TodoApp"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

dependencies {
    compile (
            'com.google.guava:guava:19.0',
            'com.google.code.gson:gson:2.5',
            'com.sparkjava:spark-core:2.3',
            'org.apache.commons:commons-dbcp2:2.1.1',
            'org.flywaydb:flyway-core:3.2.1',
            'org.projectlombok:lombok:1.16.6',
            'javax.persistence:persistence-api:1.0.2',
            'javax.validation:validation-api:1.1.0.Final',
            'javax.ws.rs:javax.ws.rs-api:2.0.1',
            "org.jooq:jooq:$jooqVersion",
            'org.slf4j:slf4j-simple:1.7.14'
    )

    testCompile 'junit:junit:4.11'

    runtime (
            'org.postgresql:postgresql:9.4.1207'
    )
}

//flyway {
//     url = dbUrl
//}

// https://github.com/flyway/flyway/issues/775
// Flyway needs to support Java migrations, so it depends on testClasses.
// That results in a circular dependency for jOOQ because we need migrations
// to run, then jOOQ code-gen and then compileJava
//project.afterEvaluate {
//    flywayClean.dependsOn -= testClasses
//    flywayMigrate.dependsOn = [processResources, processTestResources]
//}


task generateJooqCode {
//    description = 'Generate Java API for the database.'
    doLast {
        // https://github.com/jOOQ/jOOQ/tree/master/jOOQ-examples/jOOQ-codegen-gradle
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
        xml.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
            jdbc() {
                driver('org.postgresql.Driver')
                url(dbUrl)
            }
            generator() {
                database() {
                    inputSchema('todo_backend')
                }

                // Watch out for this caveat when using MarkupBuilder with "reserved names"
                // - https://github.com/jOOQ/jOOQ/issues/4797
                // - http://stackoverflow.com/a/11389034/521799
                // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
                generate([:]) {
                    pojos false
                    immutablePojos false
                    daos false
                    fluentSetters true
                    validationAnnotations true
                    jpaAnnotations true
                    globalObjectReferences true
                }
                target() {
                    packageName('todoer.models')
                    directory("src/generated/java")
                }
            }
        }

        // Run the code generator
        GenerationTool.generate(
                JAXB.unmarshal(new StringReader(writer.toString()),
                        org.jooq.util.jaxb.Configuration.class)
        )
    }
}

//generateJooqCode.dependsOn flywayMigrate
generateJooqCode.dependsOn = [processResources, processTestResources]

compileJava.dependsOn generateJooqCode


shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}


task stage {
    dependsOn build
    dependsOn shadowJar
}